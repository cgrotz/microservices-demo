load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library", "go_test")
load("@io_bazel_rules_docker//container:container.bzl", "container_image", "container_push")

go_library(
    name = "productcatalogservice_lib",
    srcs = ["server.go"],
    importpath = "github.com/GoogleCloudPlatform/microservices-demo/src/productcatalogservice",
    visibility = ["//visibility:private"],
    deps = [
        "//src/productcatalogservice/genproto",
        "@com_github_golang_protobuf//jsonpb:go_default_library_gen",
        "@com_github_pkg_errors//:go_default_library",
        "@com_github_sirupsen_logrus//:go_default_library",
        "@com_google_cloud_go_profiler//:go_default_library",
        "@io_opentelemetry_go_contrib_instrumentation_google_golang_org_grpc_otelgrpc//:go_default_library",
        "@io_opentelemetry_go_otel//:go_default_library",
        "@io_opentelemetry_go_otel//propagation:go_default_library",
        "@io_opentelemetry_go_otel_exporters_otlp_otlptrace_otlptracegrpc//:go_default_library",
        "@io_opentelemetry_go_otel_sdk//trace:go_default_library",
        "@org_golang_google_grpc//:go_default_library",
        "@org_golang_google_grpc//codes:go_default_library",
        "@org_golang_google_grpc//health/grpc_health_v1:go_default_library",
        "@org_golang_google_grpc//status:go_default_library",
    ],
)

go_binary(
    name = "productcatalogservice",
    embed = [":productcatalogservice_lib"],
    goarch = "amd64",
    goos = "linux",
    visibility = ["//visibility:public"],
)

go_test(
    name = "productcatalogservice_test",
    srcs = ["server_test.go"],
    embed = [":productcatalogservice_lib"],
    deps = [
        "//src/productcatalogservice/genproto",
        "@com_github_golang_protobuf//proto:go_default_library",
        "@com_github_google_go_cmp//cmp:go_default_library",
        "@org_golang_google_grpc//:go_default_library",
        "@org_golang_google_grpc//codes:go_default_library",
        "@org_golang_google_grpc//status:go_default_library",
    ],
)

container_image(
    name = "productcatalogservice_image",
    base = "@distroless_base//image",
    entrypoint = ["/productcatalogservice"],
    files = [":productcatalogservice"],
    repository = "gcr.io/cgrotz_test",
    visibility = ["//visibility:public"],
)

container_push(
    name = "productcatalogservice_image_push",
    format = "Docker",
    image = ":productcatalogservice_image",
    registry = "europe-docker.pkg.dev",
    repository = "swe-core-sandbox/microservice-demo/productcatalogservice",
)
