load("@io_bazel_rules_docker//container:container.bzl", "container_image", "container_push")
load("@io_bazel_rules_docker//docker/util:run.bzl", "container_run_and_commit")
load("@io_bazel_rules_docker//python:image.bzl", "py_layer")
load("@io_bazel_rules_docker//lang:image.bzl", "app_layer")
load("@io_bazel_rules_docker//python3:image.bzl", "py3_image")
load("@emailservice_deps//:requirements.bzl", "requirement")

py_layer(
    name = "emailservice_dependencies",
    deps = [
        requirement("backoff"),
        requirement("cachetools"),
        requirement("certifi"),
        requirement("charset_normalizer"),
        requirement("deprecated"),
        requirement("google-api-core"),
        requirement("google_api_python_client"),
        requirement("google_auth"),
        requirement("google_auth_httplib2"),
        requirement("google_cloud_profiler"),
        requirement("google_cloud_trace"),
        requirement("googleapis_common_protos"),
        requirement("grpcio"),
        requirement("grpcio_health_checking"),
        requirement("grpcio_status"),
        requirement("httplib2"),
        requirement("idna"),
        requirement("jinja2"),
        requirement("markupsafe"),
        requirement("opentelemetry_api"),
        requirement("opentelemetry_distro"),
        requirement("opentelemetry_exporter_otlp_proto_grpc"),
        requirement("opentelemetry_instrumentation"),
        requirement("opentelemetry_instrumentation_grpc"),
        requirement("opentelemetry_proto"),
        requirement("opentelemetry_sdk"),
        requirement("opentelemetry_semantic_conventions"),
        requirement("proto_plus"),
        requirement("protobuf"),
        requirement("pyasn1"),
        requirement("pyasn1_modules"),
        requirement("pyparsing"),
        requirement("python_json_logger"),
        requirement("requests"),
        requirement("rsa"),
        requirement("six"),
        requirement("typing_extensions"),
        requirement("uritemplate"),
        requirement("urllib3"),
        requirement("wrapt"),
    ],
)

app_layer(
    name = "emailservice_image",
    base = "//:py3_base",
    binary = ":emailservice",
    create_empty_workspace_dir = True,
    entrypoint = ["/usr/bin/python3"],
)

py_binary(
    name = "emailservice",
    srcs = glob(["*.py"]),
    main = "email_server.py",
    deps = [
        requirement("backoff"),
        requirement("cachetools"),
        requirement("certifi"),
        requirement("charset_normalizer"),
        requirement("deprecated"),
        requirement("google-api-core"),
        requirement("google_api_python_client"),
        requirement("google_auth"),
        requirement("google_auth_httplib2"),
        requirement("google_cloud_profiler"),
        requirement("google_cloud_trace"),
        requirement("googleapis_common_protos"),
        requirement("grpcio"),
        requirement("grpcio_health_checking"),
        requirement("grpcio_status"),
        requirement("httplib2"),
        requirement("idna"),
        requirement("jinja2"),
        requirement("markupsafe"),
        requirement("opentelemetry_api"),
        requirement("opentelemetry_distro"),
        requirement("opentelemetry_exporter_otlp_proto_grpc"),
        requirement("opentelemetry_instrumentation"),
        requirement("opentelemetry_instrumentation_grpc"),
        requirement("opentelemetry_proto"),
        requirement("opentelemetry_sdk"),
        requirement("opentelemetry_semantic_conventions"),
        requirement("proto_plus"),
        requirement("protobuf"),
        requirement("pyasn1"),
        requirement("pyasn1_modules"),
        requirement("pyparsing"),
        requirement("python_json_logger"),
        requirement("requests"),
        requirement("rsa"),
        requirement("six"),
        requirement("typing_extensions"),
        requirement("uritemplate"),
        requirement("urllib3"),
        requirement("wrapt"),
    ],
)

container_push(
    name = "emailservice_image_push",
    format = "Docker",
    image = ":emailservice_image",
    registry = "europe-docker.pkg.dev",
    repository = "swe-core-sandbox/microservice-demo/emailservice",
)
